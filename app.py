import streamlit as st
import pandas as pd
import os
from datetime import datetime
import time
import base64

# Configura√ß√£o da p√°gina Streamlit
st.set_page_config(page_title="Aux√≠lio Educa√ß√£o - NUPNN", page_icon="üíß", layout="wide", menu_items={
    "About": "https://ucsb-nupnn.streamlit.app/"})
st.header("üö∏`Lan√ßamentos` - Aux√≠lio Educa√ß√£o")

# Definindo o estilo CSS para o rodap√©
footer_style = """
position: fixed;
left: 0;
bottom: 0;
width: 100%;
background-color: #f0f0f0;
color: #333;
text-align: center;
padding: 10px 0;
"""


# Adicionando o rodap√© com o texto "Hagliberto Alves de Oliveira"
st.markdown(
    """
    <div style='"""+ footer_style +"""'>
        üë®üèª‚Äçüíª Hagliberto Alves de Oliveira ¬ÆÔ∏è
    </div>
    """,
    unsafe_allow_html=True
)


def setup_page():
    # Coloque aqui o c√≥digo para configurar a p√°gina do Streamlit
    pass



# Recuperar a senha do segredo
PASSWORD = os.environ.get("PASSWORD")

if PASSWORD is None:
    raise ValueError("A vari√°vel de ambiente PASSWORD n√£o est√° definida.")

# Fun√ß√£o para autenticar o usu√°rio
def authenticate():
    st.sidebar.info("`N√∫cleo de Pessoal Natal Norte`")
    st.sidebar.success("üè´ üö∏ Aux√≠lio-Creche | Aux√≠lio-Bab√°")
    password = st.sidebar.text_input("üîú `Credencial de Acesso:`", type="password", placeholder='üåê Digite sua credencial', help=("‚úÖ Podem acessar: Bruna e Hagliberto"))
    if password == PASSWORD:
        st.sidebar.markdown("")  # Ocultar a barra lateral ap√≥s o login
        st.empty()  # Limpar o campo de senha ap√≥s o login
        return True
    else:
        st.sidebar.error("‚ùå Apenas pessoal autorizado!")
        return False



# Autenticar o usu√°rio antes de prosseguir
if authenticate():
    
    # Interface para pesquisa de empregado
    def interface_pesquisa_empregado():
        st.info("üîé Pesquise o empregado")
        matricula_input = None
        dependente_input = None
        dados_df = pd.DataFrame()  # Definindo um DataFrame vazio inicialmente
        with st.expander("**üë∑üèª‚Äç‚ôÇÔ∏è Empregado e üëßüèªüë¶üèª Dependente**"):
            col1, col2 = st.columns(2)
            with col1:
                matricula_input = st.number_input("Matr√≠cula: `Digite e pressione enter`", placeholder='üåê Digite o nome do setor', min_value=0, step=1, help=("‚ö†Ô∏è Alguns empregados possuem mais de um dependente"))
                if matricula_input is None:
                    return None, None
                if not os.path.isfile('dados.xlsx'):
                    st.warning("Por favor, crie a planilha 'dados.xlsx' antes de prosseguir.")
                    return None, None
                dados_df = pd.read_excel('dados.xlsx')
    
                if matricula_input is not None and matricula_input in dados_df['MATRICULA'].values:
                    empregado_nome = dados_df[dados_df['MATRICULA'] == matricula_input]['EMPREGADO'].iloc[0]
                    st.info(f"{empregado_nome}")
                else:
                    warning_message = st.warning("Por favor, digite uma matr√≠cula v√°lida para verificar os dependentes.")
                    time.sleep(5)  # Espera por 5 segundos
                    warning_message.empty()  # Limpa a mensagem de aviso
    
            with col2:
                if matricula_input is not None and matricula_input in dados_df['MATRICULA'].values:
                    dependente_options = dados_df[dados_df['MATRICULA'] == matricula_input]['DEPENDENTE BENEFICIADO'].tolist()
                    if len(dependente_options) > 1:
                        dependente_input = st.selectbox("Dependente:", options=dependente_options)
                        st.error("‚ö†Ô∏è Existem m√∫ltiplos dependentes associados a esta matr√≠cula.")
                    elif len(dependente_options) == 1:
                        dependente_input = dependente_options[0]
                        dependente_nome = dados_df[(dados_df['MATRICULA'] == matricula_input) & (dados_df['DEPENDENTE BENEFICIADO'] == dependente_input)]['DEPENDENTE BENEFICIADO'].iloc[0]
                        st.success(f"Dependente associado: {dependente_nome}")
                    else:
                        st.warning("N√£o foram encontrados dependentes associados a esta matr√≠cula.")
        return matricula_input, dependente_input

    # Fun√ß√£o para atualizar os dados do aux√≠lio creche
    def update_auxilio_creche(matricula, valor_apresentado, observacao, tipo_auxilio="Creche", dependente=None, autismo=False, status=None):
        try:
            # Verificar se a matr√≠cula, valor apresentado e observa√ß√£o foram fornecidos
            if matricula is None or valor_apresentado is None or observacao is None:
                st.error("Por favor, preencha todos os campos obrigat√≥rios.")
                return
    
            # Verificar se a planilha dados.xlsx existe
            if not os.path.isfile('dados.xlsx'):
                # Se a planilha n√£o existir, solicitar ao usu√°rio que a crie
                st.warning("A planilha 'dados.xlsx' n√£o foi encontrada no diret√≥rio atual.")
                st.warning("Por favor, crie a planilha 'dados.xlsx' antes de prosseguir.")
                return
    
            # Verificar se a planilha Auxilio.xlsx existe
            if not os.path.isfile('Auxilio.xlsx'):
                # Se a planilha n√£o existir, criar uma nova com um DataFrame vazio
                auxilio_creche_df = pd.DataFrame(columns=['MATRICULA', 'EMPREGADO', 'DEPENDENTE BENEFICIADO', 
                                                          'NASCIMENTO', 'IDADE', 'SERIE', 'CNPJ', 'Raz√£o Social', 
                                                          'Valor apresentado', '√Ä pagar', 'Observa√ß√£o', 'Tipo de Aux√≠lio',
                                                          'Status', 'Data'])
            else:
                # Se a planilha existir, carregar seu conte√∫do
                auxilio_creche_df = pd.read_excel('Auxilio.xlsx')
    
            # Carregar dados.xlsx
            dados_df = pd.read_excel('dados.xlsx')
    
            # Verificar se a matr√≠cula existe em dados.xlsx
            if matricula not in dados_df['MATRICULA'].values:
                st.error(f"A matr√≠cula {matricula} n√£o foi encontrada base de empregados.")
                return
    
            # Obter os dados correspondentes √† matr√≠cula e dependente
            if dependente is not None:
                dados_matricula = dados_df[(dados_df['MATRICULA'] == matricula) & (dados_df['DEPENDENTE BENEFICIADO'] == dependente)].iloc[0]
            else:
                dados_matricula = dados_df[dados_df['MATRICULA'] == matricula].iloc[0]
    
            # Verificar se o dependente tem menos de 12 anos
            idade_dependente = calcular_idade(dados_matricula['NASCIMENTO'])
            if idade_dependente >= 12:
                st.error(f"O dependente tem atualmente {idade_dependente} anos e n√£o √© eleg√≠vel para receber o aux√≠lio creche.")
                return
    
            # Definir o valor m√°ximo do aux√≠lio de acordo com o tipo de aux√≠lio e a presen√ßa de autismo
            if autismo:
                valor_maximo_auxilio = 628.22
            else:
                valor_maximo_auxilio = 314.11
    
            # Calcular o valor a ser pago ou usar o valor fornecido
            if valor_apresentado == "":
                valor_a_pagar = valor_maximo_auxilio  # Ajuste no c√°lculo
            else:
                # Substituir v√≠rgula por ponto e converter para float
                valor_apresentado = valor_apresentado.replace(',', '.')
                valor_a_pagar = min(float(valor_apresentado), valor_maximo_auxilio)
    
            # Adicionar nova entrada aos dados em Auxilio.xlsx
            nova_entrada = {
                'MATRICULA': f"{matricula:06}",  # Formatando para 6 d√≠gitos sem pontos nem v√≠rgulas
                'EMPREGADO': dados_matricula['EMPREGADO'],
                'DEPENDENTE BENEFICIADO': dados_matricula['DEPENDENTE BENEFICIADO'],
                'NASCIMENTO': formatar_data_nascimento(dados_matricula['NASCIMENTO']),
                'IDADE': calcular_idade(dados_matricula['NASCIMENTO']),
                'SERIE': dados_matricula['SERIE'],
                'CNPJ': dados_matricula['CNPJ'],
                'Raz√£o Social': dados_matricula['Raz√£o Social'],
                'Valor apresentado': formatar_valor(valor_apresentado),  # Corrigindo aqui
                '√Ä pagar': formatar_valor(valor_a_pagar),
                'Observa√ß√£o': observacao,
                'Tipo de Aux√≠lio': tipo_auxilio,
                'Status': status if status else "‚ö†Ô∏è Pendente",  # Definindo o status como pendente por padr√£o
                'Data': datetime.now().strftime('%d/%m/%Y')  # Adicionando data
            }
            auxilio_creche_df = pd.concat([auxilio_creche_df, pd.DataFrame([nova_entrada])], ignore_index=True)
    
            # Salvar as altera√ß√µes em Auxilio.xlsx
            auxilio_creche_df.to_excel('Auxilio.xlsx', index=False)
    
            # Mensagem de sucesso ao atualizar os dados
            success_message = st.empty()
            success_message.success("Os dados foram atualizados com sucesso!")
    
            # Aguarda por 2 segundos antes de limpar a mensagem
            time.sleep(2)
    
            # Limpa a mensagem de sucesso ap√≥s 2 segundos
            success_message.empty()
    
    
        except Exception as e:
            st.error("Por favor, verifique os dados e tente novamente.")
            st.error(str(e))  # Mostra a mensagem de erro espec√≠fica
    
    # Defina sua fun√ß√£o download_auxilio_xlsx() para retornar os dados do arquivo
    def download_auxilio_xlsx():
        if os.path.isfile('Auxilio.xlsx'):
            with open('Auxilio.xlsx', 'rb') as f:
                data = f.read()
            return data
        else:
            st.warning("O arquivo 'Auxilio.xlsx' ainda n√£o foi criado.")

    # Fun√ß√£o para baixar a planilha em formato CSV
    def download_auxilio_csv():
        if os.path.isfile('Auxilio.xlsx'):
            auxilio_df = pd.read_excel('Auxilio.xlsx')
            # Criar um DataFrame com as colunas desejadas
            csv_df = pd.DataFrame({
                'Matricula': auxilio_df['MATRICULA'],
                'Verba': [113 if 'creche' in tipo.lower() else (152 if 'bab√°' in tipo.lower() else None) for tipo in auxilio_df['Tipo de Aux√≠lio']],
                '√Ä pagar': auxilio_df['√Ä pagar']
            })
            # Salvar o DataFrame como CSV
            csv_df.to_csv('Auxilio.csv', index=False)
            # Ler o arquivo CSV e retornar os dados
            with open('Auxilio.csv', 'rb') as f:
                data = f.read()
            return data
        else:
            st.warning("O arquivo 'Auxilio.xlsx' ainda n√£o foi criado.")


    # Fun√ß√£o para excluir linha
    def delete_row(index):
        try:
            auxilio_creche_df = pd.read_excel('Auxilio.xlsx')
            auxilio_creche_df.drop(index, inplace=True)
            auxilio_creche_df.to_excel('Auxilio.xlsx', index=False)
            st.success("Linha exclu√≠da com sucesso!")
        except Exception as e:
            st.error("Ocorreu um erro ao excluir a linha.")
            st.error(str(e))


    # Fun√ß√£o para excluir todas as informa√ß√µes
    def delete_all_data():
        try:
            if os.path.isfile('Auxilio.xlsx'):
                # Remover todas as linhas do arquivo Auxilio.xlsx
                auxilio_creche_df = pd.DataFrame(columns=['MATRICULA', 'EMPREGADO', 'DEPENDENTE BENEFICIADO', 
                                                          'NASCIMENTO', 'IDADE', 'SERIE', 'CNPJ', 'Raz√£o Social', 
                                                          'Valor apresentado', '√Ä pagar', 'Observa√ß√£o', 'Tipo de Aux√≠lio',
                                                          'Status', 'Data'])
                auxilio_creche_df.to_excel('Auxilio.xlsx', index=False)
                st.success("Todas as informa√ß√µes foram exclu√≠das com sucesso!")
            else:
                st.warning("Nenhum dado foi encontrado para exclus√£o.")
        except Exception as e:
            st.error("Ocorreu um erro ao excluir todas as informa√ß√µes.")
            st.error(str(e))
    
    
    
    
    # Fun√ß√£o para calcular a idade com base na data de nascimento
    def calcular_idade(data_nascimento):
        data_atual = datetime.now()
        data_nascimento = pd.to_datetime(data_nascimento, format='%d/%m/%Y')
        idade = (data_atual - data_nascimento).days // 365
        return idade
    
    # Fun√ß√£o para formatar a data de nascimento
    def formatar_data_nascimento(data_nascimento):
        if isinstance(data_nascimento, str):
            data_nascimento = pd.to_datetime(data_nascimento, format='%d/%m/%Y')
        return data_nascimento.strftime('%d/%m/%Y')
    
    # Fun√ß√£o para formatar o valor
    def formatar_valor(valor):
        try:
            if isinstance(valor, str):
                # Se for uma matr√≠cula, retorne o valor sem aplicar formata√ß√£o
                if valor.isdigit():
                    return f'R${float(valor):,.2f}'  # Adiciona o prefixo "R$" e formata o valor
                # Caso contr√°rio, fa√ßa a formata√ß√£o normal
                valor = valor.strip()
                valor = valor.replace(',', '.')
                valor = ''.join(filter(lambda char: char.isdigit() or char == '.', valor))
                valor = float(valor)
        except ValueError:
            st.error("Por favor, insira um valor num√©rico v√°lido no campo de Valor Apresentado.")
            return None
        return f'R${valor:.2f}'
    
    
    
    # Fun√ß√£o para verificar se os campos obrigat√≥rios foram preenchidos
    def campos_obrigatorios_preenchidos(matricula_input, valor_apresentado_input):
        if matricula_input is None or valor_apresentado_input == "":
            st.error("Por favor, informe o valor apresentado no recibo de pagamento escolar.")
            return False
        return True
    
    
    # Interface para valor e observa√ß√£o
    def interface_valor_observacao(matricula_input, dependente_input):
        if matricula_input is None:
            st.error("Por favor, selecione uma matr√≠cula v√°lida.")
            return
    
        st.success("üßÆ Informe o valor apresentado uma descri√ß√£o e a categoria")
        with st.expander("üí∏**Valor Apresentado e Observa√ß√£o**"):
            col1, col2, col3 = st.columns([2, 4, 2])
            with col1:
                valor_apresentado_input = st.text_input("Valor Apresentado: `Obrigat√≥rio`", placeholder='üí∏ Informe o Valor do Recibo', help=("‚ö†Ô∏è Insira o valor constante no recibo de pagamento!"))
                status_input = st.selectbox("Situa√ß√£o", ["‚ö†Ô∏è Pendente", "üÜó Inserido no TOTVS", "‚ùå Rejeitado", "‚úÖ Aprovado"], help=("Informe a situa√ß√£o atual"))
            with col2:
                observacao_input = st.text_area("Anota√ß√µes:", placeholder='üìã Por favor, informe aqui qualquer informa√ß√£o relevante sobre a situa√ß√£o do pagamento do aux√≠lio creche ou bab√°, meses anteriores, documentos enviados, entre outros detalhes importantes!', help=("‚ö†Ô∏è Adicione informa√ß√µes sobre o comprovante apresentado!"))
            with col3:
                tipo_auxilio_input = st.radio("`Categoria de Aux√≠lio:`", ["Creche", "Bab√°"], help=("Escolhas as op√ß√µes dispon√≠veis"))
                autismo_input = st.checkbox("TDAH", help=("Marque se a crian√ßa possui TDAH"))
                if st.button("üîú `Lan√ßar informa√ß√µes`"):
                    if campos_obrigatorios_preenchidos(matricula_input, valor_apresentado_input):
                        tipo_auxilio = tipo_auxilio_input
                        autismo = autismo_input  # Passa o valor do checkbox
                        if autismo_input:
                            tipo_auxilio += " (TDAH)"
                        update_auxilio_creche(matricula_input, valor_apresentado_input, observacao_input, tipo_auxilio, dependente_input, autismo, status_input)
                        # Redefine os campos ap√≥s a atualiza√ß√£o
                        matricula_input = ""  # Limpa o campo de matr√≠cula
                        valor_apresentado_input = ""  # Limpa o campo de valor apresentado
                        observacao_input = ""  # Limpa o campo de observa√ß√£o
                        # Se houver outros campos que precisam ser limpos, fa√ßa o mesmo para eles
                
    # Fun√ß√£o para baixar a planilha em formato xlsx
    def download_auxilio_xlsx():
        if os.path.isfile('Auxilio.xlsx'):
            # Se o arquivo existir, fazer o download
            with open('Auxilio.xlsx', 'rb') as f:
                data = f.read()
            st.download_button(label="Download Auxilio.xlsx", data=data, file_name='Auxilio.xlsx', mime='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
        else:
            st.warning("O arquivo 'Auxilio.xlsx' ainda n√£o foi criado.")
    
    

    # Fun√ß√£o para mostrar os dados j√° lan√ßados
    def mostrar_dados_lancados():
        try:
            auxilio_creche_df = pd.read_excel('Auxilio.xlsx')
        except FileNotFoundError:
            st.warning("Nenhum dado foi lan√ßado ainda.")
            return

        st.dataframe(auxilio_creche_df)  # Mostra o DataFrame


    def download_button(file_name, data, label):
        b64_data = base64.b64encode(data).decode('utf-8')
        href = f'data:application/octet-stream;base64,{b64_data}'
        st.markdown(f'<a href="{href}" download="{file_name}"><button class="download-button">{label}</button></a>', unsafe_allow_html=True)
    
    


        # Fun√ß√£o para atualizar a situa√ß√£o dos dados lan√ßados
    def update_situacao(index, situacao):
        try:
            auxilio_creche_df = pd.read_excel('Auxilio.xlsx')
            auxilio_creche_df.at[index, 'Status'] = situacao
            auxilio_creche_df.to_excel('Auxilio.xlsx', index=False)
            st.success("Situa√ß√£o atualizada com sucesso!")
            # Atualiza a p√°gina
            st.experimental_rerun()
        except Exception as e:
            st.error("Ocorreu um erro ao atualizar a situa√ß√£o.")
            st.error(str(e))


    # Fun√ß√£o para interface de atualiza√ß√£o de situa√ß√£o
    def interface_atualizar_situacao():
        st.info("üõ†Ô∏è Atualizar Situa√ß√£o")
        index_input = st.number_input("√çndice da linha:", min_value=0, step=1)
        situacao_input = st.selectbox("Situa√ß√£o:", ["‚ö†Ô∏è Pendente", "üÜó Inserido no TOTVS", "‚ùå Rejeitado", "‚úÖ Aprovado"])
        if st.button("Atualizar"):
            update_situacao(index_input, situacao_input)


    # Interface do Streamlit
    # Fun√ß√£o principal
    def main():
        setup_page()
    
        expander_col1, expander_col2 = st.columns([2,3])
    
        with expander_col1:
            matricula_input, dependente_input = interface_pesquisa_empregado()
    
        with expander_col2:
            interface_valor_observacao(matricula_input, dependente_input)
            
        with st.expander("**Visualize as informa√ß√µes que j√° foram lan√ßadas**"):
            mostrar_dados_lancados()
    
        expander_col1, expander_col2, expander_col3, expander_col4, expander_col5 = st.columns(5)
        
        
        with expander_col1:
            # Atualizar situa√ß√£o
            with st.expander("**üõ†Ô∏è Atualizar Situa√ß√£o**"):
                interface_atualizar_situacao()
         
        with expander_col2:
            with st.expander("üíπ **Baixar a Planilha**"):
                st.write("Geralmente, os dados devem ser salvos no √∫ltimo ou primeiro dia do m√™s.")
                
                # Bot√£o para baixar em formato XLSX
                if st.button("‚úÖ Consolidar dados em XLSX"):
                    st.write("Baixe a planilha em formato XLSX para an√°lise ou refer√™ncia.")
                    data_xlsx = download_auxilio_xlsx()
                    if data_xlsx is not None:
                        download_button("Auxilio.xlsx", data_xlsx, "Download Auxilio.xlsx")
                
                # Bot√£o para baixar em formato CSV
                if st.button("‚úÖ Consolidar dados em CSV"):
                    st.write("Baixe a planilha em formato CSV para importa√ß√£o no TOTVS.")
                    data_csv = download_auxilio_csv()
                    if data_csv is not None:
                        download_button("Auxilio.csv", data_csv, "Baixar Planilha CSV")
        
        
         
        with expander_col5:
            # Excluir linha
            with st.expander("`‚ôªÔ∏è Excluir Linhas`"):
                st.error("üö´ Informe a linha que voc√™ deseja excluir!")
                index_to_delete = st.number_input("√çndice da Linha para Excluir", min_value=0, step=1)
                if st.button("‚ùå Excluir", help=("‚ö†Ô∏è Antes de excluir as linhas, fa√ßa um beckup dos dados!")):
                    delete_row(index_to_delete)
                    # Atualizar a p√°gina
                    st.experimental_rerun()
        
        with expander_col5:
            # Excluir todas as informa√ß√µes
            with st.expander("`‚ôªÔ∏è Excluir Todas as Informa√ß√µes`"):
                st.error("üöÆ Essa a√ß√£o ir√° excluir todos os dados!")
                if st.button("‚ùå Apagar Tudo", help=("‚ö†Ô∏è Antes de apagar toda a planilha, fa√ßa um beckup dos dados!")):
                    delete_all_data()
                    # Atualizar a p√°gina
                    st.experimental_rerun() 
    
    # Chamando a fun√ß√£o principal
    if __name__ == "__main__":
        setup_page()  # Chama setup_page() aqui para garantir que seja chamado antes de main()
        main()
        
else:
    # Adicionando uma imagem antes do login, apenas se o login n√£o foi bem-sucedido
    st.image("https://maisautomotive.com.br/wp-content/uploads/2022/11/shutterstock_599426126_Easy-Resize.com_.jpg", use_column_width=True)
    st.success("üóùÔ∏è `Voc√™ precisa de uma credencial v√°lida para acessar o sistema!`")
    
 
